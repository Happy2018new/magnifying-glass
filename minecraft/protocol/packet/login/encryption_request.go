package packet_login

import (
	"github.com/Happy2018new/magnifying-glass/minecraft/protocol/encoding"
	packet_interface "github.com/Happy2018new/magnifying-glass/minecraft/protocol/packet/interface"
)

// See protocol encryption (https://minecraft.wiki/w/Protocol_encryption) for details.
type EncryptionRequest struct {
	// Always empty when sent by the vanilla server.
	ServerID string
	// The server's public key, in bytes.
	PublicKey []byte
	// A sequence of random bytes generated by the server.
	VerifyToken []byte
	// Whether the client should attempt to
	// authenticate through mojang servers
	// (https://minecraft.wiki/w/Minecraft_Wiki:Projects/wiki.vg_merge/Protocol_Encryption#Authentication).
	ShouldAuthenticate bool
}

// ID ..
func (p *EncryptionRequest) ID() int32 {
	return IDClientBoundEncryptionRequest
}

// Resource ..
func (p *EncryptionRequest) Resource() string {
	return "hello"
}

// BoundType ..
func (p *EncryptionRequest) BoundType() uint8 {
	return packet_interface.BoundTypeClient
}

func (p *EncryptionRequest) Marshal(io encoding.IO) {
	io.String(&p.ServerID)
	encoding.FuncSliceVarint32Length(io, &p.PublicKey, io.Uint8)
	encoding.FuncSliceVarint32Length(io, &p.VerifyToken, io.Uint8)
	io.Bool(&p.ShouldAuthenticate)
}
